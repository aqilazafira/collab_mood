
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      String    @default("Student")
  lastLogin DateTime?  @map("last_login")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  sessions  Session[]
  emotions  EmotionData[]
  settings  UserSettings?
  feedbacks     Feedback[]

  @@map("users")
}

model Session {
  id            String        @id @default(uuid())
  name          String
  description   String?
  status        String        @default("scheduled")
  startTime     String        @map("start_time")
  duration      String
  currentMood   Json?         @map("current_mood")
  participants  Json
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  userId        Int
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  emotions      EmotionData[]
  suggestions  Suggestion[]
  reports      SessionReport[]
  feedbacks     Feedback[]

  @@map("sessions")
}

model EmotionData {
  id        String   @id @default(uuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  valence   Float
  arousal   Float
  timestamp DateTime @default(now())
  notes     String?

  @@map("emotion_data")
}

model Suggestion {
  id          String   @id @default(uuid())
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  content     String
  type        String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")


  @@map("suggestions")
}

model SessionReport {
  id        String   @id @default(uuid())
  sessionId String   @unique
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  summary   String
  insights  Json
  createdAt DateTime @default(now()) @map("created_at")


  @@map("session_reports")
}

model UserSettings {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme           String   @default("light")
  notifications  Boolean  @default(true)
  language       String   @default("en")
  workHoursStart String   @default("09:00")
  workHoursEnd   String   @default("17:00")
  breakFrequency Int      @default(50)
  breakDuration  Int      @default(10)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("user_settings")
}

model Feedback {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  content   String
  rating    Int // 1-5
  createdAt DateTime @default(now())
}
